{
  "author": {
    "name": "Aaron Heckmann",
    "email": "aaron.heckmann+github@gmail.com"
  },
  "name": "mongoose-ttl",
  "description": "Mongoose Time-To-Live plugin",
  "version": "0.0.3",
  "main": "index",
  "repository": {
    "type": "git",
    "url": "git://github.com/aheckmann/mongoose-ttl.git"
  },
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": ">0.4.x"
  },
  "dependencies": {
    "ms": "0.1.0"
  },
  "devDependencies": {
    "mongoose": "2.7.0",
    "mocha": "1.2.1"
  },
  "_id": "mongoose-ttl@0.0.3",
  "dist": {
    "shasum": "4a13dcc45db0296384c6b1f225df757a53bfe0e0",
    "tarball": "https://registry.npmjs.org/mongoose-ttl/-/mongoose-ttl-0.0.3.tgz"
  },
  "readme": "#Mongoose-TTL Plugin\n\nProvides time-to-live support for [Mongoose](http://mongoosejs.com).\n\n[![Build Status](https://secure.travis-ci.org/aheckmann/mongoose-ttl.png)](http://travis-ci.org/aheckmann/mongoose-ttl)\n\nOptions:\n\n  - ttl: the time each doc should live in the db (default 60 seconds)\n  - interval: how often the expired doc reaper runs (default 5 mins)\n  - reap: enable the expired doc reaper (default true)\n  - onReap: callback passed to reaper execution\n\nExample:\n\n```js\nvar schema = new Schema({..});\nschema.plugin(ttl, { ttl: 5000 });\n```\n\nThe ttl option supports the ms module by [guille](https://github.com/guille) meaning\nwe can specify ttls with friendlier syntax. Example:\n\n```\n value     milliseconds\n========================\n '2d'      172800000\n '1.5h'    5400000\n '1h'      3600000\n '1m'      60000\n '5s'      5000\n '500ms'   500\n 100       100\n```\n\nThe expired document reaper can be disabled by passing `reap: false`.\nUseful when working in multi-core environments when we only want one\nprocess executing it.\n\n```js\nvar schema = new Schema({..});\nschema.plugin(ttl, { ttl: 5000, reap: false });\nvar Cache = db.model('Cache', schema);\nif (isMyWorker) Cache.startTTLReaper();\n```\n\nThe reaper can also be stopped.\n\n```js\nCache.stopTTLReaper();\n```\n\nTime-to-live is specified at the collection level, however\nit can also be overridden for a given document.\n\n```js\nvar cache = new Cache;\ncache.ttl = '2m' // lives for two minutes\ncache.save();\n```\n\nWe can also reset the ttl for a given document to its\ndefault plugin state.\n\n```js\ncache.resetTTL();\n```\n## Mongoose Version\n>= 2.5.2\n\n### MongoDB TTL collections\nMongoDB is getting official support for TTL collections [soon-ish](https://github.com/mongodb/mongo/commit/25bdc679a0e559d64ec7f22b0468cf5b1671c4e7) at which point this plugin will need to change.\n\n[LICENSE](https://github.com/aheckmann/mongoose-ttl/blob/master/LICENSE)\n",
  "maintainers": [
    {
      "name": "aaron",
      "email": "aaron.heckmann+github@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "4a13dcc45db0296384c6b1f225df757a53bfe0e0",
  "_resolved": "https://registry.npmjs.org/mongoose-ttl/-/mongoose-ttl-0.0.3.tgz",
  "_from": "mongoose-ttl@0.0.3",
  "bugs": {
    "url": "https://github.com/aheckmann/mongoose-ttl/issues"
  },
  "homepage": "https://github.com/aheckmann/mongoose-ttl#readme"
}
